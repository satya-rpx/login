/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.login.fileservice.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import java.io.IOException;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.login.fileservice.FileService;
import com.login.fileservice.FileService.FileUploadResponse;
import com.login.fileservice.FileService.WMFile;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;

/**
 * Controller object for domain model class {@link FileService}.
 * @see FileService
 */
@RestController
@Api(value = "FileController", description = "controller class for java service execution")
@RequestMapping("/file")
public class FileController {

    @Autowired
    private FileService fileService;

    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @RequestMapping(value = "/file", method = RequestMethod.DELETE)
    public boolean deleteFile(@RequestParam(value = "file", required = false) String file, @RequestParam(value = "relativePath", required = false) String relativePath) throws IOException {
        return fileService.deleteFile(file, relativePath);
    }

    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @RequestMapping(value = "/downloadFile", method = RequestMethod.GET, produces = "application/octet-stream")
    public DownloadResponse getDownloadFile(@RequestParam(value = "file", required = false) String file, @RequestParam(value = "relativePath", required = false) String relativePath, @RequestParam(value = "returnName", required = false) String returnName) throws Exception {
        return fileService.getDownloadFile(file, relativePath, returnName);
    }

    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @RequestMapping(value = "/downloadFileAsInline", method = RequestMethod.GET, produces = "application/octet-stream")
    public DownloadResponse getDownloadFileAsInline(@RequestParam(value = "file", required = false) String file, @RequestParam(value = "relativePath", required = false) String relativePath, @RequestParam(value = "returnName", required = false) String returnName) throws Exception {
        return fileService.getDownloadFileAsInline(file, relativePath, returnName);
    }

    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @RequestMapping(value = "/files", method = RequestMethod.GET)
    public WMFile[] listFiles( HttpServletRequest httpServletRequest, @RequestParam(value = "relativePath", required = false) String relativePath) throws IOException {
        return fileService.listFiles(httpServletRequest, relativePath);
    }

    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @RequestMapping(value = "/uploadFile", method = RequestMethod.POST, consumes = "multipart/form-data")
    public FileUploadResponse[] uploadFile(@RequestPart(value = "files", required = false) MultipartFile[] files, @RequestParam(value = "relativePath", required = false) String relativePath,  HttpServletRequest httpServletRequest) {
        return fileService.uploadFile(files, relativePath, httpServletRequest);
    }
}