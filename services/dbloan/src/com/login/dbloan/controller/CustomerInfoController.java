/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.login.dbloan.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.login.dbloan.Customer;
import com.login.dbloan.CustomerInfo;
import com.login.dbloan.Property;
import com.login.dbloan.service.CustomerInfoService;


/**
 * Controller object for domain model class CustomerInfo.
 * @see CustomerInfo
 */
@RestController("dbloan.CustomerInfoController")
@Api(value = "CustomerInfoController", description = "Exposes APIs to work with CustomerInfo resource.")
@RequestMapping("/dbloan/CustomerInfo")
public class CustomerInfoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CustomerInfoController.class);

    @Autowired
	@Qualifier("dbloan.CustomerInfoService")
	private CustomerInfoService customerInfoService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new CustomerInfo instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CustomerInfo createCustomerInfo(@RequestBody CustomerInfo customerInfo) {
		LOGGER.debug("Create CustomerInfo with information: {}" , customerInfo);

		customerInfo = customerInfoService.create(customerInfo);
		LOGGER.debug("Created CustomerInfo with information: {}" , customerInfo);

	    return customerInfo;
	}

    @ApiOperation(value = "Returns the CustomerInfo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CustomerInfo getCustomerInfo(@PathVariable("id") String id) {
        LOGGER.debug("Getting CustomerInfo with id: {}" , id);

        CustomerInfo foundCustomerInfo = customerInfoService.getById(id);
        LOGGER.debug("CustomerInfo details with id: {}" , foundCustomerInfo);

        return foundCustomerInfo;
    }

    @ApiOperation(value = "Updates the CustomerInfo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CustomerInfo editCustomerInfo(@PathVariable("id") String id, @RequestBody CustomerInfo customerInfo) {
        LOGGER.debug("Editing CustomerInfo with id: {}" , customerInfo.getAadhaarCard());

        customerInfo.setAadhaarCard(id);
        customerInfo = customerInfoService.update(customerInfo);
        LOGGER.debug("CustomerInfo details with id: {}" , customerInfo);

        return customerInfo;
    }
    
    @ApiOperation(value = "Partially updates the CustomerInfo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CustomerInfo patchCustomerInfo(@PathVariable("id") String id, @RequestBody @MapTo(CustomerInfo.class) Map<String, Object> customerInfoPatch) {
        LOGGER.debug("Partially updating CustomerInfo with id: {}" , id);

        CustomerInfo customerInfo = customerInfoService.partialUpdate(id, customerInfoPatch);
        LOGGER.debug("CustomerInfo details after partial update: {}" , customerInfo);

        return customerInfo;
    }

    @ApiOperation(value = "Deletes the CustomerInfo instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCustomerInfo(@PathVariable("id") String id) {
        LOGGER.debug("Deleting CustomerInfo with id: {}" , id);

        CustomerInfo deletedCustomerInfo = customerInfoService.delete(id);

        return deletedCustomerInfo != null;
    }

    /**
     * @deprecated Use {@link #findCustomerInfos(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CustomerInfo instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<CustomerInfo> searchCustomerInfosByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CustomerInfos list by query filter:{}", (Object) queryFilters);
        return customerInfoService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CustomerInfo instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CustomerInfo> findCustomerInfos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CustomerInfos list by filter:", query);
        return customerInfoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CustomerInfo instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<CustomerInfo> filterCustomerInfos(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CustomerInfos list by filter", query);
        return customerInfoService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportCustomerInfos(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return customerInfoService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportCustomerInfosAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = CustomerInfo.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> customerInfoService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of CustomerInfo instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countCustomerInfos( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CustomerInfos");
		return customerInfoService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getCustomerInfoAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return customerInfoService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/customers", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the customers instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Customer> findAssociatedCustomers(@PathVariable("id") String id, Pageable pageable) {

        LOGGER.debug("Fetching all associated customers");
        return customerInfoService.findAssociatedCustomers(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/properties", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the properties instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Property> findAssociatedProperties(@PathVariable("id") String id, Pageable pageable) {

        LOGGER.debug("Fetching all associated properties");
        return customerInfoService.findAssociatedProperties(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CustomerInfoService instance
	 */
	protected void setCustomerInfoService(CustomerInfoService service) {
		this.customerInfoService = service;
	}

}