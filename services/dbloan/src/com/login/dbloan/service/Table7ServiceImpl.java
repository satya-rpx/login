/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.login.dbloan.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.login.dbloan.Table7;


/**
 * ServiceImpl object for domain model class Table7.
 *
 * @see Table7
 */
@Service("dbloan.Table7Service")
@Validated
public class Table7ServiceImpl implements Table7Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table7ServiceImpl.class);


    @Autowired
    @Qualifier("dbloan.Table7Dao")
    private WMGenericDao<Table7, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Table7, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbloanTransactionManager")
    @Override
    public Table7 create(Table7 table7) {
        LOGGER.debug("Creating a new Table7 with information: {}", table7);

        Table7 table7Created = this.wmGenericDao.create(table7);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(table7Created);
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager")
    @Override
    public Table7 getById(Integer table7Id) {
        LOGGER.debug("Finding Table7 by id: {}", table7Id);
        return this.wmGenericDao.findById(table7Id);
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager")
    @Override
    public Table7 findById(Integer table7Id) {
        LOGGER.debug("Finding Table7 by id: {}", table7Id);
        try {
            return this.wmGenericDao.findById(table7Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Table7 found with id: {}", table7Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager")
    @Override
    public List<Table7> findByMultipleIds(List<Integer> table7Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Table7s by ids: {}", table7Ids);

        return this.wmGenericDao.findByMultipleIds(table7Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbloanTransactionManager")
    @Override
    public Table7 update(Table7 table7) {
        LOGGER.debug("Updating Table7 with information: {}", table7);

        this.wmGenericDao.update(table7);
        this.wmGenericDao.refresh(table7);

        return table7;
    }

    @Transactional(value = "dbloanTransactionManager")
    @Override
    public Table7 partialUpdate(Integer table7Id, Map<String, Object>table7Patch) {
        LOGGER.debug("Partially Updating the Table7 with id: {}", table7Id);

        Table7 table7 = getById(table7Id);

        try {
            ObjectReader table7Reader = this.objectMapper.reader().forType(Table7.class).withValueToUpdate(table7);
            table7 = table7Reader.readValue(this.objectMapper.writeValueAsString(table7Patch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", table7Patch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        table7 = update(table7);

        return table7;
    }

    @Transactional(value = "dbloanTransactionManager")
    @Override
    public Table7 delete(Integer table7Id) {
        LOGGER.debug("Deleting Table7 with id: {}", table7Id);
        Table7 deleted = this.wmGenericDao.findById(table7Id);
        if (deleted == null) {
            LOGGER.debug("No Table7 found with id: {}", table7Id);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Table7.class.getSimpleName(), table7Id);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbloanTransactionManager")
    @Override
    public void delete(Table7 table7) {
        LOGGER.debug("Deleting Table7 with {}", table7);
        this.wmGenericDao.delete(table7);
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager")
    @Override
    public Page<Table7> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table7s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager")
    @Override
    public Page<Table7> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table7s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbloan for table Table7 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbloan for table Table7 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}