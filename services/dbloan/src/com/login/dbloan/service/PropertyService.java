/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.login.dbloan.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.login.dbloan.Property;

/**
 * Service object for domain model class {@link Property}.
 */
public interface PropertyService {

    /**
     * Creates a new Property. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Property if any.
     *
     * @param property Details of the Property to be created; value cannot be null.
     * @return The newly created Property.
     */
    Property create(@Valid Property property);


	/**
     * Returns Property by given id if exists.
     *
     * @param propertyId The id of the Property to get; value cannot be null.
     * @return Property associated with the given propertyId.
	 * @throws EntityNotFoundException If no Property is found.
     */
    Property getById(Integer propertyId);

    /**
     * Find and return the Property by given id if exists, returns null otherwise.
     *
     * @param propertyId The id of the Property to get; value cannot be null.
     * @return Property associated with the given propertyId.
     */
    Property findById(Integer propertyId);

	/**
     * Find and return the list of Properties by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param propertyIds The id's of the Property to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Properties associated with the given propertyIds.
     */
    List<Property> findByMultipleIds(List<Integer> propertyIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Property. It replaces all fields of the existing Property with the given property.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Property if any.
     *
     * @param property The details of the Property to be updated; value cannot be null.
     * @return The updated Property.
     * @throws EntityNotFoundException if no Property is found with given input.
     */
    Property update(@Valid Property property);


    /**
     * Partially updates the details of an existing Property. It updates only the
     * fields of the existing Property which are passed in the propertyPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Property if any.
     *
     * @param propertyId The id of the Property to be deleted; value cannot be null.
     * @param propertyPatch The partial data of Property which is supposed to be updated; value cannot be null.
     * @return The updated Property.
     * @throws EntityNotFoundException if no Property is found with given input.
     */
    Property partialUpdate(Integer propertyId, Map<String, Object> propertyPatch);

    /**
     * Deletes an existing Property with the given id.
     *
     * @param propertyId The id of the Property to be deleted; value cannot be null.
     * @return The deleted Property.
     * @throws EntityNotFoundException if no Property found with the given id.
     */
    Property delete(Integer propertyId);

    /**
     * Deletes an existing Property with the given object.
     *
     * @param property The instance of the Property to be deleted; value cannot be null.
     */
    void delete(Property property);

    /**
     * Find all Properties matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Properties.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Property> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Properties matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Properties.
     *
     * @see Pageable
     * @see Page
     */
    Page<Property> findAll(String query, Pageable pageable);

    /**
     * Exports all Properties matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Properties matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Properties in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Property.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}