/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.login.dbloan.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.login.dbloan.Property;


/**
 * ServiceImpl object for domain model class Property.
 *
 * @see Property
 */
@Service("dbloan.PropertyService")
@Validated
public class PropertyServiceImpl implements PropertyService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PropertyServiceImpl.class);


    @Autowired
    @Qualifier("dbloan.PropertyDao")
    private WMGenericDao<Property, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Property, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbloanTransactionManager")
    @Override
    public Property create(Property property) {
        LOGGER.debug("Creating a new Property with information: {}", property);

        Property propertyCreated = this.wmGenericDao.create(property);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(propertyCreated);
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager")
    @Override
    public Property getById(Integer propertyId) {
        LOGGER.debug("Finding Property by id: {}", propertyId);
        return this.wmGenericDao.findById(propertyId);
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager")
    @Override
    public Property findById(Integer propertyId) {
        LOGGER.debug("Finding Property by id: {}", propertyId);
        try {
            return this.wmGenericDao.findById(propertyId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Property found with id: {}", propertyId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager")
    @Override
    public List<Property> findByMultipleIds(List<Integer> propertyIds, boolean orderedReturn) {
        LOGGER.debug("Finding Properties by ids: {}", propertyIds);

        return this.wmGenericDao.findByMultipleIds(propertyIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "dbloanTransactionManager")
    @Override
    public Property update(Property property) {
        LOGGER.debug("Updating Property with information: {}", property);

        this.wmGenericDao.update(property);
        this.wmGenericDao.refresh(property);

        return property;
    }

    @Transactional(value = "dbloanTransactionManager")
    @Override
    public Property partialUpdate(Integer propertyId, Map<String, Object>propertyPatch) {
        LOGGER.debug("Partially Updating the Property with id: {}", propertyId);

        Property property = getById(propertyId);

        try {
            ObjectReader propertyReader = this.objectMapper.reader().forType(Property.class).withValueToUpdate(property);
            property = propertyReader.readValue(this.objectMapper.writeValueAsString(propertyPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", propertyPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        property = update(property);

        return property;
    }

    @Transactional(value = "dbloanTransactionManager")
    @Override
    public Property delete(Integer propertyId) {
        LOGGER.debug("Deleting Property with id: {}", propertyId);
        Property deleted = this.wmGenericDao.findById(propertyId);
        if (deleted == null) {
            LOGGER.debug("No Property found with id: {}", propertyId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Property.class.getSimpleName(), propertyId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "dbloanTransactionManager")
    @Override
    public void delete(Property property) {
        LOGGER.debug("Deleting Property with {}", property);
        this.wmGenericDao.delete(property);
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager")
    @Override
    public Page<Property> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Properties");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager")
    @Override
    public Page<Property> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Properties");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbloan for table Property to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service dbloan for table Property to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbloanTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}